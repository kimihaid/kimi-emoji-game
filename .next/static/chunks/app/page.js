/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cwww%5Ckimi-game%5Csrc%5Ccomponents%5CEmojiSoundDesigner.tsx&server=false!":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cwww%5Ckimi-game%5Csrc%5Ccomponents%5CEmojiSoundDesigner.tsx&server=false! ***!
  \**********************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/EmojiSoundDesigner.tsx */ \"(app-pages-browser)/./src/components/EmojiSoundDesigner.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1DJTNBJTVDd3d3JTVDa2ltaS1nYW1lJTVDc3JjJTVDY29tcG9uZW50cyU1Q0Vtb2ppU291bmREZXNpZ25lci50c3gmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzI1ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFx3d3dcXFxca2ltaS1nYW1lXFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXEVtb2ppU291bmREZXNpZ25lci50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cwww%5Ckimi-game%5Csrc%5Ccomponents%5CEmojiSoundDesigner.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/ClickCounters.tsx":
/*!******************************************!*\
  !*** ./src/components/ClickCounters.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ClickCounters; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction ClickCounters(param) {\n    let { userClicks, globalClicks, onReset } = param;\n    _s();\n    const [animateUser, setAnimateUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [animateGlobal, setAnimateGlobal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [prevUserClicks, setPrevUserClicks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(userClicks);\n    const [prevGlobalClicks, setPrevGlobalClicks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(globalClicks);\n    // Animate when counts change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (userClicks > prevUserClicks) {\n            setAnimateUser(true);\n            setTimeout(()=>setAnimateUser(false), 600);\n        }\n        setPrevUserClicks(userClicks);\n    }, [\n        userClicks,\n        prevUserClicks\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (globalClicks > prevGlobalClicks) {\n            setAnimateGlobal(true);\n            setTimeout(()=>setAnimateGlobal(false), 600);\n        }\n        setPrevGlobalClicks(globalClicks);\n    }, [\n        globalClicks,\n        prevGlobalClicks\n    ]);\n    const formatNumber = (num)=>{\n        if (num >= 1000000) {\n            return \"\".concat((num / 1000000).toFixed(1), \"M\");\n        } else if (num >= 1000) {\n            return \"\".concat((num / 1000).toFixed(1), \"K\");\n        }\n        return num.toString();\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col sm:flex-row gap-4 justify-center items-center mb-8\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl p-4 shadow-lg min-w-[200px] transition-all duration-300 \".concat(animateUser ? \"scale-110 shadow-xl\" : \"\"),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-white/80 text-sm font-medium mb-1\",\n                                children: \"Your Clicks\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                                lineNumber: 48,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-2xl font-bold text-white transition-all duration-300 \".concat(animateUser ? \"scale-125\" : \"\"),\n                                children: formatNumber(userClicks)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                                lineNumber: 49,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-white/60 text-xs mt-1\",\n                                children: \"\\uD83D\\uDC64 Personal Count\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                                lineNumber: 52,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                        lineNumber: 47,\n                        columnNumber: 9\n                    }, this),\n                    animateUser && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute inset-0 pointer-events-none\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl animate-ping\",\n                            children: \"✨\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                            lineNumber: 58,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                        lineNumber: 57,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                lineNumber: 46,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-2xl font-bold text-gray-400 px-4 hidden sm:block\",\n                children: \"VS\"\n            }, void 0, false, {\n                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                lineNumber: 66,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative bg-gradient-to-r from-orange-500 to-red-600 rounded-xl p-4 shadow-lg min-w-[200px] transition-all duration-300 \".concat(animateGlobal ? \"scale-110 shadow-xl\" : \"\"),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-white/80 text-sm font-medium mb-1\",\n                                children: \"Global Clicks\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                                lineNumber: 73,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-2xl font-bold text-white transition-all duration-300 \".concat(animateGlobal ? \"scale-125\" : \"\"),\n                                children: formatNumber(globalClicks)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                                lineNumber: 74,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-white/60 text-xs mt-1\",\n                                children: \"\\uD83C\\uDF0D Everyone's Count\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                                lineNumber: 77,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                        lineNumber: 72,\n                        columnNumber: 9\n                    }, this),\n                    animateGlobal && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute inset-0 pointer-events-none\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-4xl animate-ping\",\n                            children: \"\\uD83C\\uDF89\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                            lineNumber: 83,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                        lineNumber: 82,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                lineNumber: 71,\n                columnNumber: 7\n            }, this),\n            onReset && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: onReset,\n                className: \"ml-4 px-3 py-2 bg-gray-500 hover:bg-gray-600 text-white text-sm rounded-lg transition-colors duration-200\",\n                title: \"Reset your personal counter\",\n                children: \"\\uD83D\\uDD04 Reset\"\n            }, void 0, false, {\n                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n                lineNumber: 92,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\ClickCounters.tsx\",\n        lineNumber: 44,\n        columnNumber: 5\n    }, this);\n}\n_s(ClickCounters, \"WUgtxpJqDSU7E7XMwJi6P4CkDBo=\");\n_c = ClickCounters;\nvar _c;\n$RefreshReg$(_c, \"ClickCounters\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/ClickCounters.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/EmojiSoundDesigner.tsx":
/*!***********************************************!*\
  !*** ./src/components/EmojiSoundDesigner.tsx ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EmojiSoundDesigner; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_audioEngine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/audioEngine */ \"(app-pages-browser)/./src/lib/audioEngine.ts\");\n/* harmony import */ var _lib_emojiMappings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/emojiMappings */ \"(app-pages-browser)/./src/lib/emojiMappings.ts\");\n/* harmony import */ var _lib_clickCounter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/clickCounter */ \"(app-pages-browser)/./src/lib/clickCounter.ts\");\n/* harmony import */ var _components_ClickCounters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/ClickCounters */ \"(app-pages-browser)/./src/components/ClickCounters.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction EmojiSoundDesigner() {\n    var _soundMapperRef_current;\n    _s();\n    const [currentEmoji, setCurrentEmoji] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\\uD83D\\uDD14\");\n    const [userClicks, setUserClicks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [globalClicks, setGlobalClicks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [message, setMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        text: \"\",\n        type: \"info\"\n    });\n    const [customEmoji, setCustomEmoji] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [animatedEmojis, setAnimatedEmojis] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const audioEngineRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const soundMapperRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const currentSoundRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Initialize audio engine on client side\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (true) {\n            audioEngineRef.current = new _lib_audioEngine__WEBPACK_IMPORTED_MODULE_2__.AudioEngine();\n            soundMapperRef.current = new _lib_emojiMappings__WEBPACK_IMPORTED_MODULE_3__.EmojiSoundMapper(audioEngineRef.current);\n            // Load initial counters\n            loadCounters();\n        }\n    }, []);\n    const loadCounters = async ()=>{\n        try {\n            const counters = await _lib_clickCounter__WEBPACK_IMPORTED_MODULE_4__.ClickCounter.getBothCounters();\n            setUserClicks(counters.userClicks);\n            setGlobalClicks(counters.globalClicks);\n            console.log(\"Counters loaded:\", counters); // Debug log\n        } catch (error) {\n            console.error(\"Error loading counters:\", error);\n            // Fallback to localStorage only if API fails\n            const userClicks = _lib_clickCounter__WEBPACK_IMPORTED_MODULE_4__.ClickCounter.getUserClicks();\n            setUserClicks(userClicks);\n            setGlobalClicks(0); // Default global clicks if API fails\n        }\n    };\n    const showMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(text) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"info\";\n        setMessage({\n            text,\n            type\n        });\n        setTimeout(()=>setMessage({\n                text: \"\",\n                type: \"info\"\n            }), 3000);\n    }, []);\n    // Function to spawn animated emojis\n    const spawnAnimatedEmoji = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((emoji)=>{\n        const id = Math.random().toString(36).substr(2, 9);\n        const newEmoji = {\n            id,\n            emoji,\n            x: Math.random() * 80 + 10,\n            y: Math.random() * 60 + 20,\n            rotation: Math.random() * 360,\n            scale: Math.random() * 0.5 + 0.5\n        };\n        setAnimatedEmojis((prev)=>[\n                ...prev,\n                newEmoji\n            ]);\n        // Remove the emoji after animation completes\n        setTimeout(()=>{\n            setAnimatedEmojis((prev)=>prev.filter((e)=>e.id !== id));\n        }, 4000);\n    }, []);\n    const generateCurrentSound = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!soundMapperRef.current) return null;\n        try {\n            const soundBuffer = soundMapperRef.current.getSoundForEmoji(currentEmoji);\n            currentSoundRef.current = soundBuffer;\n            return soundBuffer;\n        } catch (error) {\n            console.error(\"Error generating sound:\", error);\n            showMessage(\"Error generating sound. Please try again.\", \"error\");\n            return null;\n        }\n    }, [\n        currentEmoji,\n        showMessage\n    ]);\n    const playCurrentSound = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (isPlaying || !audioEngineRef.current) return;\n        try {\n            setIsPlaying(true);\n            setIsLoading(true);\n            // Generate sound if not cached\n            if (!currentSoundRef.current) {\n                await generateCurrentSound();\n            }\n            if (currentSoundRef.current) {\n                const source = await audioEngineRef.current.playBuffer(currentSoundRef.current);\n                if (source) {\n                    // Increment both counters\n                    try {\n                        const counters = await _lib_clickCounter__WEBPACK_IMPORTED_MODULE_4__.ClickCounter.incrementBothCounters();\n                        console.log(\"Counters after increment:\", counters); // Debug log\n                        setUserClicks(counters.userClicks);\n                        setGlobalClicks(counters.globalClicks);\n                    } catch (error) {\n                        console.error(\"Error incrementing counters:\", error);\n                        // Fallback to just user clicks if API fails\n                        const userClicks = _lib_clickCounter__WEBPACK_IMPORTED_MODULE_4__.ClickCounter.incrementUserClicks();\n                        setUserClicks(userClicks);\n                    }\n                    showMessage(\"\\uD83C\\uDFB5 Playing \".concat(currentEmoji, \" sound!\"), \"success\");\n                    // Spawn single animated emoji for fun effect\n                    spawnAnimatedEmoji(currentEmoji);\n                    // Reset playing state when sound ends\n                    source.onended = ()=>{\n                        setIsPlaying(false);\n                    };\n                    // Auto-reset after maximum duration\n                    setTimeout(()=>{\n                        setIsPlaying(false);\n                    }, 5000);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error playing sound:\", error);\n            showMessage(\"Error playing sound. Check your audio settings.\", \"error\");\n            setIsPlaying(false);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        isPlaying,\n        generateCurrentSound,\n        showMessage,\n        currentEmoji,\n        spawnAnimatedEmoji\n    ]);\n    const downloadCurrentSound = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!audioEngineRef.current) return;\n        try {\n            // Generate sound if not cached\n            if (!currentSoundRef.current) {\n                await generateCurrentSound();\n            }\n            if (!currentSoundRef.current) {\n                showMessage(\"No sound to download. Please generate a sound first.\", \"error\");\n                return;\n            }\n            // Convert to WAV blob\n            const wavBlob = audioEngineRef.current.bufferToWav(currentSoundRef.current);\n            // Create download link\n            const url = URL.createObjectURL(wavBlob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"emoji-\".concat(currentEmoji, \"-sound.wav\");\n            // Trigger download\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            // Clean up URL\n            setTimeout(()=>URL.revokeObjectURL(url), 1000);\n            showMessage(\"Downloaded sound for \".concat(currentEmoji, \"!\"), \"success\");\n        } catch (error) {\n            console.error(\"Error downloading sound:\", error);\n            showMessage(\"Error downloading sound. Please try again.\", \"error\");\n        }\n    }, [\n        generateCurrentSound,\n        showMessage,\n        currentEmoji\n    ]);\n    const setCurrentEmojiAndGenerate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((emoji)=>{\n        setCurrentEmoji(emoji);\n        currentSoundRef.current = null; // Clear cached sound\n        // Pre-generate the sound for better responsiveness\n        if (soundMapperRef.current) {\n            setTimeout(()=>generateCurrentSound(), 100);\n        }\n    }, [\n        generateCurrentSound\n    ]);\n    const handleCustomEmojiSubmit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const emoji = customEmoji.trim();\n        if (emoji && isValidEmoji(emoji)) {\n            setCurrentEmojiAndGenerate(emoji);\n            setCustomEmoji(\"\");\n        } else {\n            showMessage(\"Please enter a valid emoji!\", \"error\");\n        }\n    }, [\n        customEmoji,\n        setCurrentEmojiAndGenerate,\n        showMessage\n    ]);\n    const resetUserCounter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        _lib_clickCounter__WEBPACK_IMPORTED_MODULE_4__.ClickCounter.resetUserClicks();\n        setUserClicks(0);\n        showMessage(\"Your counter has been reset!\", \"info\");\n    }, [\n        showMessage\n    ]);\n    const isValidEmoji = (text)=>{\n        // Simple check for basic emoji presence and length\n        return text.length >= 1 && text.length <= 2 && /[\\uD800-\\uDBFF]/.test(text) || /[\\u2600-\\u27BF]/.test(text);\n    };\n    const popularEmojis = ((_soundMapperRef_current = soundMapperRef.current) === null || _soundMapperRef_current === void 0 ? void 0 : _soundMapperRef_current.getPopularEmojis()) || [\n        \"\\uD83D\\uDD14\",\n        \"\\uD83D\\uDE02\",\n        \"\\uD83D\\uDE97\",\n        \"\\uD83E\\uDD8E\",\n        \"\\uD83D\\uDC31\",\n        \"✨\",\n        \"\\uD83D\\uDCA5\",\n        \"\\uD83C\\uDF89\",\n        \"\\uD83D\\uDC36\",\n        \"\\uD83C\\uDFB5\",\n        \"⚡\",\n        \"\\uD83C\\uDF0A\",\n        \"\\uD83D\\uDC4F\",\n        \"\\uD83C\\uDF4E\",\n        \"\\uD83D\\uDCF1\",\n        \"⚽\",\n        \"\\uD83D\\uDE82\",\n        \"\\uD83C\\uDFB8\",\n        \"\\uD83D\\uDCA8\",\n        \"\\uD83D\\uDD25\",\n        \"\\uD83C\\uDFAF\",\n        \"\\uD83E\\uDD86\",\n        \"\\uD83D\\uDCDE\",\n        \"\\uD83E\\uDD41\"\n    ];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-teal-600 text-white\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"container mx-auto px-4 py-8\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                    className: \"text-center mb-8\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-4xl md:text-6xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-pink-400\",\n                            children: \"\\uD83C\\uDFB5 Emoji Sound Designer\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 232,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-lg md:text-xl text-white/90 mb-6\",\n                            children: \"Click any emoji to hear its cartoon sound effect and compete with users worldwide!\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 235,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 231,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ClickCounters__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    userClicks: userClicks,\n                    globalClicks: globalClicks,\n                    onReset: resetUserCounter\n                }, void 0, false, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 241,\n                    columnNumber: 9\n                }, this),\n                 true && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-center mb-4 text-white/60 text-sm\",\n                    children: [\n                        \"Debug: User=\",\n                        userClicks,\n                        \", Global=\",\n                        globalClicks\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 249,\n                    columnNumber: 11\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-center mb-12 relative\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"bg-white/5 backdrop-blur-md rounded-3xl p-8 mb-8 border border-white/10 shadow-2xl\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: playCurrentSound,\n                                disabled: isPlaying || isLoading,\n                                className: \"text-[8rem] md:text-[10rem] p-8 rounded-full bg-gradient-to-br from-white/20 to-white/10 backdrop-blur-md border border-white/30 transition-all duration-500 hover:scale-110 hover:from-white/30 hover:to-white/20 hover:shadow-[0_0_80px_rgba(255,255,255,0.3)] disabled:opacity-50 disabled:cursor-not-allowed \".concat(isPlaying ? \"animate-bounce-soft shadow-[0_0_100px_rgba(255,255,255,0.5)]\" : \"hover:shadow-[0_0_60px_rgba(255,255,255,0.2)]\"),\n                                title: \"Click to hear \".concat(currentEmoji, \" sound\"),\n                                children: currentEmoji\n                            }, void 0, false, {\n                                fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                lineNumber: 257,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 256,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex flex-col sm:flex-row gap-6 justify-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: playCurrentSound,\n                                    disabled: isPlaying || isLoading,\n                                    className: \"px-8 py-4 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 rounded-2xl font-bold text-xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105 \".concat(isPlaying ? \"from-yellow-500 to-yellow-600\" : \"\"),\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"text-2xl mr-2\",\n                                            children: isLoading ? \"\\uD83D\\uDD04\" : isPlaying ? \"⏸️\" : \"▶️\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                            lineNumber: 277,\n                                            columnNumber: 15\n                                        }, this),\n                                        isLoading ? \"Loading...\" : isPlaying ? \"Playing...\" : \"Play Sound\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                    lineNumber: 270,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: downloadCurrentSound,\n                                    className: \"px-8 py-4 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 rounded-2xl font-bold text-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"text-2xl mr-2\",\n                                            children: \"\\uD83D\\uDCBE\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                            lineNumber: 285,\n                                            columnNumber: 15\n                                        }, this),\n                                        \"Download WAV\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                    lineNumber: 281,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 269,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 255,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white/5 backdrop-blur-md rounded-xl p-4 mb-6 border border-white/10 max-w-4xl mx-auto\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-lg font-bold text-center mb-4 text-white/90\",\n                            children: \"Choose Your Emoji:\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 293,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"grid grid-cols-6 sm:grid-cols-8 md:grid-cols-12 gap-2 justify-items-center\",\n                            children: popularEmojis.map((emoji)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: ()=>setCurrentEmojiAndGenerate(emoji),\n                                    className: \"text-2xl md:text-3xl p-2 rounded-lg transition-all duration-200 hover:scale-110 hover:bg-white/20 \".concat(emoji === currentEmoji ? \"bg-white/30 scale-105 shadow-lg\" : \"bg-white/5 hover:bg-white/15\"),\n                                    title: \"Click to select \".concat(emoji),\n                                    children: emoji\n                                }, emoji, false, {\n                                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                    lineNumber: 296,\n                                    columnNumber: 15\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 294,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 292,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white/5 backdrop-blur-md rounded-xl p-4 border border-white/10 text-center max-w-2xl mx-auto\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-lg font-bold mb-3 text-white/90\",\n                            children: \"Or Enter Any Emoji:\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 312,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex flex-col sm:flex-row gap-3 justify-center items-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                    type: \"text\",\n                                    value: customEmoji,\n                                    onChange: (e)=>setCustomEmoji(e.target.value),\n                                    onKeyPress: (e)=>e.key === \"Enter\" && handleCustomEmojiSubmit(),\n                                    placeholder: \"\\uD83C\\uDF89\",\n                                    maxLength: 2,\n                                    className: \"text-xl md:text-2xl p-3 rounded-lg text-center bg-white/10 border border-white/20 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent w-16 text-white placeholder-white/60\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                    lineNumber: 314,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handleCustomEmojiSubmit,\n                                    className: \"px-4 py-2 bg-orange-500 hover:bg-orange-600 rounded-lg font-bold transition-all duration-200 text-sm\",\n                                    children: \"Use This Emoji\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                                    lineNumber: 323,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 313,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 311,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"fixed inset-0 pointer-events-none z-10 overflow-hidden\",\n                    children: animatedEmojis.map((animatedEmoji)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute text-6xl animate-float-and-flip\",\n                            style: {\n                                left: \"\".concat(animatedEmoji.x, \"%\"),\n                                top: \"\".concat(animatedEmoji.y, \"%\"),\n                                transform: \"rotate(\".concat(animatedEmoji.rotation, \"deg) scale(\").concat(animatedEmoji.scale, \")\"),\n                                animation: \"float-and-flip 4s ease-out forwards\"\n                            },\n                            children: animatedEmoji.emoji\n                        }, animatedEmoji.id, false, {\n                            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                            lineNumber: 335,\n                            columnNumber: 13\n                        }, this))\n                }, void 0, false, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 333,\n                    columnNumber: 9\n                }, this),\n                message.text && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"fixed top-4 right-4 px-6 py-3 rounded-xl font-bold z-50 transition-all duration-300 \".concat(message.type === \"success\" ? \"bg-green-500\" : message.type === \"error\" ? \"bg-red-500\" : \"bg-blue-500\"),\n                    children: message.text\n                }, void 0, false, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 352,\n                    columnNumber: 11\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"footer\", {\n                    className: \"text-center mt-12 text-white/60\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: \"Sound effects generated using Web Audio API • Click counts are tracked locally and globally\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                        lineNumber: 362,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n                    lineNumber: 361,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n            lineNumber: 229,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\www\\\\kimi-game\\\\src\\\\components\\\\EmojiSoundDesigner.tsx\",\n        lineNumber: 228,\n        columnNumber: 5\n    }, this);\n}\n_s(EmojiSoundDesigner, \"5HfFnbgPS2xrsUkerrvlySJJY4I=\");\n_c = EmojiSoundDesigner;\nvar _c;\n$RefreshReg$(_c, \"EmojiSoundDesigner\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/EmojiSoundDesigner.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/audioEngine.ts":
/*!********************************!*\
  !*** ./src/lib/audioEngine.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioEngine: function() { return /* binding */ AudioEngine; }\n/* harmony export */ });\n// Web Audio API based sound engine for generating cartoon-like emoji sounds\nclass AudioEngine {\n    get context() {\n        return this.audioContext;\n    }\n    initAudioContext() {\n        try {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            this.masterGain = this.audioContext.createGain();\n            this.masterGain.connect(this.audioContext.destination);\n            this.masterGain.gain.value = 0.7;\n        } catch (error) {\n            console.error(\"Web Audio API not supported:\", error);\n        }\n    }\n    // Ensure audio context is resumed (required for some browsers)\n    async ensureAudioContext() {\n        if (this.audioContext && this.audioContext.state === \"suspended\") {\n            await this.audioContext.resume();\n        }\n    }\n    // Generate basic waveforms\n    generateTone(frequency, duration) {\n        let waveType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"sine\";\n        if (!this.audioContext) return null;\n        const bufferSize = Math.floor(duration * this.sampleRate);\n        const buffer = this.audioContext.createBuffer(1, bufferSize, this.sampleRate);\n        const data = buffer.getChannelData(0);\n        for(let i = 0; i < bufferSize; i++){\n            const time = i / this.sampleRate;\n            const angle = 2 * Math.PI * frequency * time;\n            switch(waveType){\n                case \"sine\":\n                    data[i] = Math.sin(angle);\n                    break;\n                case \"square\":\n                    data[i] = Math.sin(angle) > 0 ? 1 : -1;\n                    break;\n                case \"sawtooth\":\n                    data[i] = 2 * (angle / (2 * Math.PI) - Math.floor(angle / (2 * Math.PI) + 0.5));\n                    break;\n                case \"triangle\":\n                    data[i] = 2 * Math.abs(2 * (angle / (2 * Math.PI) - Math.floor(angle / (2 * Math.PI) + 0.5))) - 1;\n                    break;\n                default:\n                    data[i] = Math.sin(angle);\n            }\n        }\n        return buffer;\n    }\n    // Generate white noise\n    generateNoise(duration) {\n        let intensity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.1;\n        if (!this.audioContext) return null;\n        const bufferSize = Math.floor(duration * this.sampleRate);\n        const buffer = this.audioContext.createBuffer(1, bufferSize, this.sampleRate);\n        const data = buffer.getChannelData(0);\n        for(let i = 0; i < bufferSize; i++){\n            data[i] = (Math.random() * 2 - 1) * intensity;\n        }\n        return buffer;\n    }\n    // Apply envelope (ADSR)\n    applyEnvelope(buffer) {\n        let attack = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.01, decay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.1, sustain = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.7, release = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.2;\n        const data = buffer.getChannelData(0);\n        const length = data.length;\n        const attackSamples = Math.floor(attack * this.sampleRate);\n        const decaySamples = Math.floor(decay * this.sampleRate);\n        const releaseSamples = Math.floor(release * this.sampleRate);\n        const sustainSamples = length - attackSamples - decaySamples - releaseSamples;\n        for(let i = 0; i < length; i++){\n            let envelope = 1;\n            if (i < attackSamples) {\n                // Attack phase\n                envelope = i / attackSamples;\n            } else if (i < attackSamples + decaySamples) {\n                // Decay phase\n                const decayProgress = (i - attackSamples) / decaySamples;\n                envelope = 1 - decayProgress * (1 - sustain);\n            } else if (i < attackSamples + decaySamples + sustainSamples) {\n                // Sustain phase\n                envelope = sustain;\n            } else {\n                // Release phase\n                const releaseProgress = (i - attackSamples - decaySamples - sustainSamples) / releaseSamples;\n                envelope = sustain * (1 - releaseProgress);\n            }\n            data[i] *= envelope;\n        }\n        return buffer;\n    }\n    // Combine multiple buffers\n    combineBuffers(buffers, gains) {\n        if (!this.audioContext || buffers.length === 0) return null;\n        const maxLength = Math.max(...buffers.map((b)=>b.length));\n        const combined = this.audioContext.createBuffer(1, maxLength, this.sampleRate);\n        const combinedData = combined.getChannelData(0);\n        buffers.forEach((buffer, index)=>{\n            const data = buffer.getChannelData(0);\n            const gain = gains ? gains[index] : 1;\n            for(let i = 0; i < data.length; i++){\n                combinedData[i] += data[i] * gain;\n            }\n        });\n        return combined;\n    }\n    // Generate frequency sweep\n    generateSweep(startFreq, endFreq, duration) {\n        let waveType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"sine\";\n        if (!this.audioContext) return null;\n        const bufferSize = Math.floor(duration * this.sampleRate);\n        const buffer = this.audioContext.createBuffer(1, bufferSize, this.sampleRate);\n        const data = buffer.getChannelData(0);\n        for(let i = 0; i < bufferSize; i++){\n            const time = i / this.sampleRate;\n            const progress = time / duration;\n            const frequency = startFreq + (endFreq - startFreq) * progress;\n            const angle = 2 * Math.PI * frequency * time;\n            switch(waveType){\n                case \"sine\":\n                    data[i] = Math.sin(angle);\n                    break;\n                case \"square\":\n                    data[i] = Math.sin(angle) > 0 ? 1 : -1;\n                    break;\n                case \"sawtooth\":\n                    data[i] = 2 * (angle / (2 * Math.PI) - Math.floor(angle / (2 * Math.PI) + 0.5));\n                    break;\n            }\n        }\n        return buffer;\n    }\n    // Play buffer\n    async playBuffer(buffer) {\n        if (!this.audioContext || !this.masterGain || !buffer) return null;\n        await this.ensureAudioContext();\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.masterGain);\n        source.start();\n        this.currentBuffer = buffer;\n        return source;\n    }\n    // Generate specific cartoon sounds\n    generateBellSound() {\n        if (!this.audioContext) return null;\n        // Clear bell: fundamental + harmonics\n        const fundamental = this.generateTone(800, 1.5, \"sine\");\n        const harmonic2 = this.generateTone(1600, 1.2, \"sine\");\n        const harmonic3 = this.generateTone(2400, 0.8, \"sine\");\n        if (!fundamental || !harmonic2 || !harmonic3) return null;\n        const bell = this.combineBuffers([\n            fundamental,\n            harmonic2,\n            harmonic3\n        ], [\n            1,\n            0.5,\n            0.3\n        ]);\n        return bell ? this.applyEnvelope(bell, 0.01, 0.3, 0.3, 1.2) : null;\n    }\n    generateLaughSound() {\n        if (!this.audioContext) return null;\n        // Silly laughter: series of quick rising tones\n        const laughs = [];\n        for(let i = 0; i < 4; i++){\n            const pitch = 300 + i * 50;\n            const laugh = this.generateTone(pitch, 0.15, \"sine\");\n            if (laugh) {\n                laughs.push(this.applyEnvelope(laugh, 0.01, 0.05, 0.8, 0.09));\n            }\n        }\n        // Combine with slight delays\n        const totalLength = Math.floor(1.2 * this.sampleRate);\n        const combined = this.audioContext.createBuffer(1, totalLength, this.sampleRate);\n        const combinedData = combined.getChannelData(0);\n        laughs.forEach((laugh, index)=>{\n            const data = laugh.getChannelData(0);\n            const offset = Math.floor(index * 0.2 * this.sampleRate);\n            for(let i = 0; i < data.length && i + offset < totalLength; i++){\n                combinedData[i + offset] += data[i] * 0.7;\n            }\n        });\n        return combined;\n    }\n    generateCarSound() {\n        if (!this.audioContext) return null;\n        // Playful car honk: quick honk sound\n        const base = this.generateTone(220, 0.8, \"square\");\n        const harmonic = this.generateTone(440, 0.6, \"sine\");\n        if (!base || !harmonic) return null;\n        const car = this.combineBuffers([\n            base,\n            harmonic\n        ], [\n            0.7,\n            0.3\n        ]);\n        return car ? this.applyEnvelope(car, 0.05, 0.1, 0.9, 0.65) : null;\n    }\n    generateLizardSound() {\n        if (!this.audioContext) return null;\n        // Squeaky lizard chirp: high pitched quick chirp\n        const chirp = this.generateSweep(1200, 1800, 0.3, \"sine\");\n        return chirp ? this.applyEnvelope(chirp, 0.01, 0.05, 0.6, 0.24) : null;\n    }\n    generateCatSound() {\n        if (!this.audioContext) return null;\n        // Soft meow: rising then falling tone\n        const meow1 = this.generateSweep(300, 600, 0.4, \"sine\");\n        const meow2 = this.generateSweep(600, 400, 0.6, \"sine\");\n        if (!meow1 || !meow2) return null;\n        const totalLength = Math.floor(1.0 * this.sampleRate);\n        const combined = this.audioContext.createBuffer(1, totalLength, this.sampleRate);\n        const combinedData = combined.getChannelData(0);\n        const data1 = meow1.getChannelData(0);\n        const data2 = meow2.getChannelData(0);\n        // First part\n        for(let i = 0; i < data1.length; i++){\n            combinedData[i] = data1[i] * 0.8;\n        }\n        // Second part\n        const offset = Math.floor(0.4 * this.sampleRate);\n        for(let i = 0; i < data2.length && i + offset < totalLength; i++){\n            combinedData[i + offset] += data2[i] * 0.8;\n        }\n        return this.applyEnvelope(combined, 0.05, 0.1, 0.7, 0.35);\n    }\n    generateSparkleSound() {\n        if (!this.audioContext) return null;\n        // Sparkling chimes: multiple high frequencies\n        const chimes = [];\n        const frequencies = [\n            1047,\n            1319,\n            1568,\n            1865\n        ]; // C6, E6, G6, Bb6\n        frequencies.forEach((freq, index)=>{\n            const chime = this.generateTone(freq, 0.6, \"sine\");\n            if (chime) {\n                chimes.push(this.applyEnvelope(chime, 0.01, 0.2, 0.4, 0.39));\n            }\n        });\n        const totalLength = Math.floor(1.5 * this.sampleRate);\n        const combined = this.audioContext.createBuffer(1, totalLength, this.sampleRate);\n        const combinedData = combined.getChannelData(0);\n        chimes.forEach((chime, index)=>{\n            const data = chime.getChannelData(0);\n            const offset = Math.floor(index * 0.1 * this.sampleRate);\n            for(let i = 0; i < data.length && i + offset < totalLength; i++){\n                combinedData[i + offset] += data[i] * 0.6;\n            }\n        });\n        return combined;\n    }\n    generateBoomSound() {\n        if (!this.audioContext) return null;\n        // Cartoon boom: low thump + noise burst\n        const thump = this.generateTone(80, 0.5, \"sine\");\n        const noise = this.generateNoise(0.3, 0.4);\n        if (!thump || !noise) return null;\n        const boom = this.combineBuffers([\n            thump,\n            noise\n        ], [\n            0.8,\n            0.6\n        ]);\n        return boom ? this.applyEnvelope(boom, 0.01, 0.2, 0.3, 0.29) : null;\n    }\n    generateGenericPlayfulSound() {\n        if (!this.audioContext) return null;\n        // Generic playful sound: bouncy melody\n        const notes = [\n            523,\n            659,\n            784\n        ]; // C5, E5, G5\n        const melody = [];\n        notes.forEach((freq)=>{\n            const note = this.generateTone(freq, 0.25, \"sine\");\n            if (note) {\n                melody.push(this.applyEnvelope(note, 0.01, 0.05, 0.8, 0.19));\n            }\n        });\n        const totalLength = Math.floor(1.0 * this.sampleRate);\n        const combined = this.audioContext.createBuffer(1, totalLength, this.sampleRate);\n        const combinedData = combined.getChannelData(0);\n        melody.forEach((note, index)=>{\n            const data = note.getChannelData(0);\n            const offset = Math.floor(index * 0.3 * this.sampleRate);\n            for(let i = 0; i < data.length && i + offset < totalLength; i++){\n                combinedData[i + offset] += data[i] * 0.7;\n            }\n        });\n        return combined;\n    }\n    // Convert buffer to WAV blob for download\n    bufferToWav(buffer) {\n        const length = buffer.length;\n        const arrayBuffer = new ArrayBuffer(44 + length * 2);\n        const view = new DataView(arrayBuffer);\n        const data = buffer.getChannelData(0);\n        // WAV header\n        const writeString = (offset, string)=>{\n            for(let i = 0; i < string.length; i++){\n                view.setUint8(offset + i, string.charCodeAt(i));\n            }\n        };\n        writeString(0, \"RIFF\");\n        view.setUint32(4, 36 + length * 2, true);\n        writeString(8, \"WAVE\");\n        writeString(12, \"fmt \");\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n        view.setUint16(22, 1, true);\n        view.setUint32(24, this.sampleRate, true);\n        view.setUint32(28, this.sampleRate * 2, true);\n        view.setUint16(32, 2, true);\n        view.setUint16(34, 16, true);\n        writeString(36, \"data\");\n        view.setUint32(40, length * 2, true);\n        // Convert float32 to int16\n        let offset = 44;\n        for(let i = 0; i < length; i++){\n            const sample = Math.max(-1, Math.min(1, data[i]));\n            view.setInt16(offset, sample * 0x7FFF, true);\n            offset += 2;\n        }\n        return new Blob([\n            arrayBuffer\n        ], {\n            type: \"audio/wav\"\n        });\n    }\n    constructor(){\n        this.audioContext = null;\n        this.masterGain = null;\n        this.currentBuffer = null;\n        this.sampleRate = 44100;\n        this.initAudioContext();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/audioEngine.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/clickCounter.ts":
/*!*********************************!*\
  !*** ./src/lib/clickCounter.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClickCounter: function() { return /* binding */ ClickCounter; }\n/* harmony export */ });\nclass ClickCounter {\n    // Get user's local click count from localStorage\n    static getUserClicks() {\n        if (false) {}\n        try {\n            const stored = localStorage.getItem(this.USER_CLICKS_KEY);\n            return stored ? parseInt(stored, 10) : 0;\n        } catch (error) {\n            console.error(\"Error reading user clicks from localStorage:\", error);\n            return 0;\n        }\n    }\n    // Increment user's local click count\n    static incrementUserClicks() {\n        if (false) {}\n        try {\n            const current = this.getUserClicks();\n            const newCount = current + 1;\n            localStorage.setItem(this.USER_CLICKS_KEY, newCount.toString());\n            return newCount;\n        } catch (error) {\n            console.error(\"Error updating user clicks in localStorage:\", error);\n            return this.getUserClicks();\n        }\n    }\n    // Reset user's local click count\n    static resetUserClicks() {\n        if (false) {}\n        try {\n            localStorage.setItem(this.USER_CLICKS_KEY, \"0\");\n        } catch (error) {\n            console.error(\"Error resetting user clicks in localStorage:\", error);\n        }\n    }\n    // Fetch global click count from API\n    static async getGlobalClicks() {\n        try {\n            const response = await fetch(this.API_BASE);\n            const data = await response.json();\n            if (data.success && data.data) {\n                return data.data.totalClicks;\n            } else {\n                console.error(\"Failed to fetch global clicks:\", data.error);\n                return 0;\n            }\n        } catch (error) {\n            console.error(\"Error fetching global clicks:\", error);\n            return 0;\n        }\n    }\n    // Increment global click count via API\n    static async incrementGlobalClicks() {\n        try {\n            const response = await fetch(this.API_BASE, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    increment: 1\n                })\n            });\n            const data = await response.json();\n            if (data.success && data.data) {\n                return data.data.totalClicks;\n            } else {\n                console.error(\"Failed to increment global clicks:\", data.error);\n                return await this.getGlobalClicks(); // Fallback to current count\n            }\n        } catch (error) {\n            console.error(\"Error incrementing global clicks:\", error);\n            return await this.getGlobalClicks(); // Fallback to current count\n        }\n    }\n    // Reset global click count via API (admin function)\n    static async resetGlobalClicks() {\n        try {\n            const response = await fetch(this.API_BASE, {\n                method: \"PUT\"\n            });\n            const data = await response.json();\n            return data.success;\n        } catch (error) {\n            console.error(\"Error resetting global clicks:\", error);\n            return false;\n        }\n    }\n    // Increment both user and global clicks\n    static async incrementBothCounters() {\n        const userClicks = this.incrementUserClicks();\n        const globalClicks = await this.incrementGlobalClicks();\n        return {\n            userClicks,\n            globalClicks\n        };\n    }\n    // Get both counters\n    static async getBothCounters() {\n        const userClicks = this.getUserClicks();\n        const globalClicks = await this.getGlobalClicks();\n        return {\n            userClicks,\n            globalClicks\n        };\n    }\n}\nClickCounter.USER_CLICKS_KEY = \"emoji-sound-user-clicks\";\nClickCounter.API_BASE = \"/api/clicks\";\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvY2xpY2tDb3VudGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNQTtJQUlYLGlEQUFpRDtJQUNqRCxPQUFPQyxnQkFBd0I7UUFDN0IsSUFBSSxLQUFrQixFQUFhLEVBQVM7UUFFNUMsSUFBSTtZQUNGLE1BQU1DLFNBQVNDLGFBQWFDLE9BQU8sQ0FBQyxJQUFJLENBQUNDLGVBQWU7WUFDeEQsT0FBT0gsU0FBU0ksU0FBU0osUUFBUSxNQUFNO1FBQ3pDLEVBQUUsT0FBT0ssT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsZ0RBQWdEQTtZQUM5RCxPQUFPO1FBQ1Q7SUFDRjtJQUVBLHFDQUFxQztJQUNyQyxPQUFPRSxzQkFBOEI7UUFDbkMsSUFBSSxLQUFrQixFQUFhLEVBQVM7UUFFNUMsSUFBSTtZQUNGLE1BQU1DLFVBQVUsSUFBSSxDQUFDVCxhQUFhO1lBQ2xDLE1BQU1VLFdBQVdELFVBQVU7WUFDM0JQLGFBQWFTLE9BQU8sQ0FBQyxJQUFJLENBQUNQLGVBQWUsRUFBRU0sU0FBU0UsUUFBUTtZQUM1RCxPQUFPRjtRQUNULEVBQUUsT0FBT0osT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsK0NBQStDQTtZQUM3RCxPQUFPLElBQUksQ0FBQ04sYUFBYTtRQUMzQjtJQUNGO0lBRUEsaUNBQWlDO0lBQ2pDLE9BQU9hLGtCQUF3QjtRQUM3QixJQUFJLEtBQWtCLEVBQWEsRUFBTztRQUUxQyxJQUFJO1lBQ0ZYLGFBQWFTLE9BQU8sQ0FBQyxJQUFJLENBQUNQLGVBQWUsRUFBRTtRQUM3QyxFQUFFLE9BQU9FLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLGdEQUFnREE7UUFDaEU7SUFDRjtJQUVBLG9DQUFvQztJQUNwQyxhQUFhUSxrQkFBbUM7UUFDOUMsSUFBSTtZQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTSxJQUFJLENBQUNDLFFBQVE7WUFDMUMsTUFBTUMsT0FBcUMsTUFBTUgsU0FBU0ksSUFBSTtZQUU5RCxJQUFJRCxLQUFLRSxPQUFPLElBQUlGLEtBQUtBLElBQUksRUFBRTtnQkFDN0IsT0FBT0EsS0FBS0EsSUFBSSxDQUFDRyxXQUFXO1lBQzlCLE9BQU87Z0JBQ0xkLFFBQVFELEtBQUssQ0FBQyxrQ0FBa0NZLEtBQUtaLEtBQUs7Z0JBQzFELE9BQU87WUFDVDtRQUNGLEVBQUUsT0FBT0EsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtZQUMvQyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLHVDQUF1QztJQUN2QyxhQUFhZ0Isd0JBQXlDO1FBQ3BELElBQUk7WUFDRixNQUFNUCxXQUFXLE1BQU1DLE1BQU0sSUFBSSxDQUFDQyxRQUFRLEVBQUU7Z0JBQzFDTSxRQUFRO2dCQUNSQyxTQUFTO29CQUNQLGdCQUFnQjtnQkFDbEI7Z0JBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztvQkFBRUMsV0FBVztnQkFBRTtZQUN0QztZQUVBLE1BQU1WLE9BQXFDLE1BQU1ILFNBQVNJLElBQUk7WUFFOUQsSUFBSUQsS0FBS0UsT0FBTyxJQUFJRixLQUFLQSxJQUFJLEVBQUU7Z0JBQzdCLE9BQU9BLEtBQUtBLElBQUksQ0FBQ0csV0FBVztZQUM5QixPQUFPO2dCQUNMZCxRQUFRRCxLQUFLLENBQUMsc0NBQXNDWSxLQUFLWixLQUFLO2dCQUM5RCxPQUFPLE1BQU0sSUFBSSxDQUFDUSxlQUFlLElBQUksNEJBQTRCO1lBQ25FO1FBQ0YsRUFBRSxPQUFPUixPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxxQ0FBcUNBO1lBQ25ELE9BQU8sTUFBTSxJQUFJLENBQUNRLGVBQWUsSUFBSSw0QkFBNEI7UUFDbkU7SUFDRjtJQUVBLG9EQUFvRDtJQUNwRCxhQUFhZSxvQkFBc0M7UUFDakQsSUFBSTtZQUNGLE1BQU1kLFdBQVcsTUFBTUMsTUFBTSxJQUFJLENBQUNDLFFBQVEsRUFBRTtnQkFDMUNNLFFBQVE7WUFDVjtZQUVBLE1BQU1MLE9BQXFDLE1BQU1ILFNBQVNJLElBQUk7WUFDOUQsT0FBT0QsS0FBS0UsT0FBTztRQUNyQixFQUFFLE9BQU9kLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLGtDQUFrQ0E7WUFDaEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSx3Q0FBd0M7SUFDeEMsYUFBYXdCLHdCQUErRTtRQUMxRixNQUFNQyxhQUFhLElBQUksQ0FBQ3ZCLG1CQUFtQjtRQUMzQyxNQUFNd0IsZUFBZSxNQUFNLElBQUksQ0FBQ1YscUJBQXFCO1FBRXJELE9BQU87WUFBRVM7WUFBWUM7UUFBYTtJQUNwQztJQUVBLG9CQUFvQjtJQUNwQixhQUFhQyxrQkFBeUU7UUFDcEYsTUFBTUYsYUFBYSxJQUFJLENBQUMvQixhQUFhO1FBQ3JDLE1BQU1nQyxlQUFlLE1BQU0sSUFBSSxDQUFDbEIsZUFBZTtRQUUvQyxPQUFPO1lBQUVpQjtZQUFZQztRQUFhO0lBQ3BDO0FBQ0Y7QUFwSGFqQyxhQUNhSyxrQkFBa0I7QUFEL0JMLGFBRWFrQixXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvY2xpY2tDb3VudGVyLnRzP2QwNjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUmVzcG9uc2UsIEdsb2JhbENsaWNrRGF0YSB9IGZyb20gJ0AvdHlwZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENsaWNrQ291bnRlciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVVNFUl9DTElDS1NfS0VZID0gJ2Vtb2ppLXNvdW5kLXVzZXItY2xpY2tzJztcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBUElfQkFTRSA9ICcvYXBpL2NsaWNrcyc7XHJcblxyXG4gIC8vIEdldCB1c2VyJ3MgbG9jYWwgY2xpY2sgY291bnQgZnJvbSBsb2NhbFN0b3JhZ2VcclxuICBzdGF0aWMgZ2V0VXNlckNsaWNrcygpOiBudW1iZXIge1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gMDtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RvcmVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5VU0VSX0NMSUNLU19LRVkpO1xyXG4gICAgICByZXR1cm4gc3RvcmVkID8gcGFyc2VJbnQoc3RvcmVkLCAxMCkgOiAwO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVhZGluZyB1c2VyIGNsaWNrcyBmcm9tIGxvY2FsU3RvcmFnZTonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSW5jcmVtZW50IHVzZXIncyBsb2NhbCBjbGljayBjb3VudFxyXG4gIHN0YXRpYyBpbmNyZW1lbnRVc2VyQ2xpY2tzKCk6IG51bWJlciB7XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiAwO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5nZXRVc2VyQ2xpY2tzKCk7XHJcbiAgICAgIGNvbnN0IG5ld0NvdW50ID0gY3VycmVudCArIDE7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuVVNFUl9DTElDS1NfS0VZLCBuZXdDb3VudC50b1N0cmluZygpKTtcclxuICAgICAgcmV0dXJuIG5ld0NvdW50O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgdXNlciBjbGlja3MgaW4gbG9jYWxTdG9yYWdlOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlckNsaWNrcygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVzZXQgdXNlcidzIGxvY2FsIGNsaWNrIGNvdW50XHJcbiAgc3RhdGljIHJlc2V0VXNlckNsaWNrcygpOiB2b2lkIHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlVTRVJfQ0xJQ0tTX0tFWSwgJzAnKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc2V0dGluZyB1c2VyIGNsaWNrcyBpbiBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRmV0Y2ggZ2xvYmFsIGNsaWNrIGNvdW50IGZyb20gQVBJXHJcbiAgc3RhdGljIGFzeW5jIGdldEdsb2JhbENsaWNrcygpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLkFQSV9CQVNFKTtcclxuICAgICAgY29uc3QgZGF0YTogQXBpUmVzcG9uc2U8R2xvYmFsQ2xpY2tEYXRhPiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5kYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGEuZGF0YS50b3RhbENsaWNrcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggZ2xvYmFsIGNsaWNrczonLCBkYXRhLmVycm9yKTtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZ2xvYmFsIGNsaWNrczonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSW5jcmVtZW50IGdsb2JhbCBjbGljayBjb3VudCB2aWEgQVBJXHJcbiAgc3RhdGljIGFzeW5jIGluY3JlbWVudEdsb2JhbENsaWNrcygpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLkFQSV9CQVNFLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgaW5jcmVtZW50OiAxIH0pLFxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGRhdGE6IEFwaVJlc3BvbnNlPEdsb2JhbENsaWNrRGF0YT4gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZGF0YS5zdWNjZXNzICYmIGRhdGEuZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBkYXRhLmRhdGEudG90YWxDbGlja3M7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluY3JlbWVudCBnbG9iYWwgY2xpY2tzOicsIGRhdGEuZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEdsb2JhbENsaWNrcygpOyAvLyBGYWxsYmFjayB0byBjdXJyZW50IGNvdW50XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluY3JlbWVudGluZyBnbG9iYWwgY2xpY2tzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0R2xvYmFsQ2xpY2tzKCk7IC8vIEZhbGxiYWNrIHRvIGN1cnJlbnQgY291bnRcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlc2V0IGdsb2JhbCBjbGljayBjb3VudCB2aWEgQVBJIChhZG1pbiBmdW5jdGlvbilcclxuICBzdGF0aWMgYXN5bmMgcmVzZXRHbG9iYWxDbGlja3MoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuQVBJX0JBU0UsIHtcclxuICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGRhdGE6IEFwaVJlc3BvbnNlPEdsb2JhbENsaWNrRGF0YT4gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIHJldHVybiBkYXRhLnN1Y2Nlc3M7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXNldHRpbmcgZ2xvYmFsIGNsaWNrczonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEluY3JlbWVudCBib3RoIHVzZXIgYW5kIGdsb2JhbCBjbGlja3NcclxuICBzdGF0aWMgYXN5bmMgaW5jcmVtZW50Qm90aENvdW50ZXJzKCk6IFByb21pc2U8eyB1c2VyQ2xpY2tzOiBudW1iZXI7IGdsb2JhbENsaWNrczogbnVtYmVyIH0+IHtcclxuICAgIGNvbnN0IHVzZXJDbGlja3MgPSB0aGlzLmluY3JlbWVudFVzZXJDbGlja3MoKTtcclxuICAgIGNvbnN0IGdsb2JhbENsaWNrcyA9IGF3YWl0IHRoaXMuaW5jcmVtZW50R2xvYmFsQ2xpY2tzKCk7XHJcbiAgICBcclxuICAgIHJldHVybiB7IHVzZXJDbGlja3MsIGdsb2JhbENsaWNrcyB9O1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IGJvdGggY291bnRlcnNcclxuICBzdGF0aWMgYXN5bmMgZ2V0Qm90aENvdW50ZXJzKCk6IFByb21pc2U8eyB1c2VyQ2xpY2tzOiBudW1iZXI7IGdsb2JhbENsaWNrczogbnVtYmVyIH0+IHtcclxuICAgIGNvbnN0IHVzZXJDbGlja3MgPSB0aGlzLmdldFVzZXJDbGlja3MoKTtcclxuICAgIGNvbnN0IGdsb2JhbENsaWNrcyA9IGF3YWl0IHRoaXMuZ2V0R2xvYmFsQ2xpY2tzKCk7XHJcbiAgICBcclxuICAgIHJldHVybiB7IHVzZXJDbGlja3MsIGdsb2JhbENsaWNrcyB9O1xyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJDbGlja0NvdW50ZXIiLCJnZXRVc2VyQ2xpY2tzIiwic3RvcmVkIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIlVTRVJfQ0xJQ0tTX0tFWSIsInBhcnNlSW50IiwiZXJyb3IiLCJjb25zb2xlIiwiaW5jcmVtZW50VXNlckNsaWNrcyIsImN1cnJlbnQiLCJuZXdDb3VudCIsInNldEl0ZW0iLCJ0b1N0cmluZyIsInJlc2V0VXNlckNsaWNrcyIsImdldEdsb2JhbENsaWNrcyIsInJlc3BvbnNlIiwiZmV0Y2giLCJBUElfQkFTRSIsImRhdGEiLCJqc29uIiwic3VjY2VzcyIsInRvdGFsQ2xpY2tzIiwiaW5jcmVtZW50R2xvYmFsQ2xpY2tzIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaW5jcmVtZW50IiwicmVzZXRHbG9iYWxDbGlja3MiLCJpbmNyZW1lbnRCb3RoQ291bnRlcnMiLCJ1c2VyQ2xpY2tzIiwiZ2xvYmFsQ2xpY2tzIiwiZ2V0Qm90aENvdW50ZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/clickCounter.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/emojiMappings.ts":
/*!**********************************!*\
  !*** ./src/lib/emojiMappings.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiSoundMapper: function() { return /* binding */ EmojiSoundMapper; }\n/* harmony export */ });\nclass EmojiSoundMapper {\n    // Get sound for any emoji\n    getSoundForEmoji(emoji) {\n        // Check cache first\n        if (this.soundCache.has(emoji)) {\n            return this.soundCache.get(emoji) || null;\n        }\n        // Generate sound\n        let soundBuffer;\n        if (this.emojiMappings[emoji]) {\n            soundBuffer = this.emojiMappings[emoji]();\n        } else {\n            // Generate generic playful sound for unknown emojis\n            soundBuffer = this.audioEngine.generateGenericPlayfulSound();\n        }\n        // Cache the result\n        this.soundCache.set(emoji, soundBuffer);\n        return soundBuffer;\n    }\n    // Additional sound generators for specific emojis\n    generateFrogSound() {\n        const croak = this.audioEngine.generateSweep(200, 150, 0.4, \"square\");\n        return croak ? this.audioEngine.applyEnvelope(croak, 0.05, 0.1, 0.8, 0.25) : null;\n    }\n    generateBirdSound() {\n        const chirp1 = this.audioEngine.generateSweep(2000, 3000, 0.2, \"sine\");\n        const chirp2 = this.audioEngine.generateSweep(2500, 3500, 0.15, \"sine\");\n        if (!chirp1 || !chirp2 || !this.audioEngine.context) return null;\n        const totalLength = Math.floor(0.8 * this.audioEngine.sampleRate);\n        const combined = this.audioEngine.context.createBuffer(1, totalLength, this.audioEngine.sampleRate);\n        const combinedData = combined.getChannelData(0);\n        const data1 = chirp1.getChannelData(0);\n        const data2 = chirp2.getChannelData(0);\n        for(let i = 0; i < data1.length; i++){\n            combinedData[i] = data1[i] * 0.6;\n        }\n        const offset = Math.floor(0.3 * this.audioEngine.sampleRate);\n        for(let i = 0; i < data2.length && i + offset < totalLength; i++){\n            combinedData[i + offset] += data2[i] * 0.6;\n        }\n        return combined;\n    }\n    generateBeeSound() {\n        const buzz = this.audioEngine.generateTone(350, 1.0, \"sawtooth\");\n        return buzz ? this.audioEngine.applyEnvelope(buzz, 0.1, 0.2, 0.9, 0.7) : null;\n    }\n    generateMooSound() {\n        const moo = this.audioEngine.generateSweep(150, 100, 1.2, \"square\");\n        return moo ? this.audioEngine.applyEnvelope(moo, 0.2, 0.3, 0.8, 0.7) : null;\n    }\n    generateOinkSound() {\n        const oink = this.audioEngine.generateTone(400, 0.3, \"square\");\n        return oink ? this.audioEngine.applyEnvelope(oink, 0.01, 0.05, 0.9, 0.24) : null;\n    }\n    generateSqueakSound() {\n        const squeak = this.audioEngine.generateSweep(1500, 2000, 0.2, \"sine\");\n        return squeak ? this.audioEngine.applyEnvelope(squeak, 0.01, 0.02, 0.8, 0.17) : null;\n    }\n    generateQuackSound() {\n        const quack = this.audioEngine.generateTone(300, 0.4, \"square\");\n        return quack ? this.audioEngine.applyEnvelope(quack, 0.02, 0.08, 0.7, 0.3) : null;\n    }\n    generateTrainSound() {\n        const whistle = this.audioEngine.generateTone(800, 1.5, \"sine\");\n        return whistle ? this.audioEngine.applyEnvelope(whistle, 0.3, 0.2, 0.8, 0.8) : null;\n    }\n    generatePlaneSound() {\n        const engine = this.audioEngine.generateTone(200, 2.0, \"sawtooth\");\n        return engine ? this.audioEngine.applyEnvelope(engine, 0.5, 0.3, 0.9, 1.2) : null;\n    }\n    generateHelicopterSound() {\n        const rotor = this.audioEngine.generateTone(120, 1.5, \"square\");\n        return rotor ? this.audioEngine.applyEnvelope(rotor, 0.2, 0.1, 0.9, 1.2) : null;\n    }\n    generateBicycleSound() {\n        const bell = this.audioEngine.generateTone(1200, 0.5, \"sine\");\n        return bell ? this.audioEngine.applyEnvelope(bell, 0.01, 0.1, 0.6, 0.39) : null;\n    }\n    generateScooterSound() {\n        const buzz = this.audioEngine.generateTone(180, 1.0, \"sawtooth\");\n        return buzz ? this.audioEngine.applyEnvelope(buzz, 0.1, 0.2, 0.8, 0.7) : null;\n    }\n    generatePhoneSound() {\n        const ring1 = this.audioEngine.generateTone(800, 0.5, \"sine\");\n        const ring2 = this.audioEngine.generateTone(1000, 0.4, \"sine\");\n        if (!ring1 || !ring2) return null;\n        const combined = this.audioEngine.combineBuffers([\n            ring1,\n            ring2\n        ], [\n            0.7,\n            0.5\n        ]);\n        return combined ? this.audioEngine.applyEnvelope(combined, 0.01, 0.1, 0.8, 0.39) : null;\n    }\n    generateAlarmSound() {\n        const alarm = this.audioEngine.generateTone(1000, 1.0, \"square\");\n        return alarm ? this.audioEngine.applyEnvelope(alarm, 0.01, 0.05, 0.9, 0.94) : null;\n    }\n    generateMusicSound() {\n        const chord = [\n            523,\n            659,\n            784\n        ]; // C major chord\n        const notes = chord.map((freq)=>this.audioEngine.generateTone(freq, 1.0, \"sine\")).filter(Boolean);\n        if (notes.length === 0) return null;\n        const combined = this.audioEngine.combineBuffers(notes, [\n            0.5,\n            0.5,\n            0.5\n        ]);\n        return combined ? this.audioEngine.applyEnvelope(combined, 0.05, 0.2, 0.7, 0.73) : null;\n    }\n    generateGuitarSound() {\n        const strum = this.audioEngine.generateTone(330, 1.2, \"sawtooth\");\n        return strum ? this.audioEngine.applyEnvelope(strum, 0.01, 0.3, 0.6, 0.89) : null;\n    }\n    generateDrumSound() {\n        const kick = this.audioEngine.generateTone(60, 0.3, \"sine\");\n        const noise = this.audioEngine.generateNoise(0.1, 0.3);\n        if (!kick || !noise) return null;\n        const drum = this.audioEngine.combineBuffers([\n            kick,\n            noise\n        ], [\n            0.8,\n            0.4\n        ]);\n        return drum ? this.audioEngine.applyEnvelope(drum, 0.01, 0.05, 0.3, 0.24) : null;\n    }\n    generatePianoSound() {\n        const note = this.audioEngine.generateTone(523, 1.5, \"sine\"); // C5\n        return note ? this.audioEngine.applyEnvelope(note, 0.01, 0.3, 0.5, 1.19) : null;\n    }\n    generateMegaphoneSound() {\n        const voice = this.audioEngine.generateTone(400, 0.8, \"square\");\n        return voice ? this.audioEngine.applyEnvelope(voice, 0.05, 0.1, 0.9, 0.65) : null;\n    }\n    generateCrySound() {\n        const sob = this.audioEngine.generateSweep(400, 200, 1.0, \"sine\");\n        return sob ? this.audioEngine.applyEnvelope(sob, 0.2, 0.3, 0.8, 0.5) : null;\n    }\n    generateSnoreSound() {\n        const snore = this.audioEngine.generateTone(80, 1.5, \"sawtooth\");\n        return snore ? this.audioEngine.applyEnvelope(snore, 0.3, 0.2, 0.9, 1.0) : null;\n    }\n    generateSneezeSound() {\n        const sneeze = this.audioEngine.generateNoise(0.3, 0.8);\n        return sneeze ? this.audioEngine.applyEnvelope(sneeze, 0.01, 0.05, 0.8, 0.24) : null;\n    }\n    generateScreamSound() {\n        const scream = this.audioEngine.generateSweep(800, 1200, 0.8, \"sawtooth\");\n        return scream ? this.audioEngine.applyEnvelope(scream, 0.01, 0.1, 0.9, 0.69) : null;\n    }\n    generateYawnSound() {\n        const yawn = this.audioEngine.generateSweep(300, 150, 1.5, \"sine\");\n        return yawn ? this.audioEngine.applyEnvelope(yawn, 0.3, 0.5, 0.8, 0.7) : null;\n    }\n    generateYumSound() {\n        const yum = this.audioEngine.generateTone(500, 0.6, \"sine\");\n        return yum ? this.audioEngine.applyEnvelope(yum, 0.05, 0.1, 0.8, 0.45) : null;\n    }\n    generateThunderSound() {\n        const thunder = this.audioEngine.generateNoise(2.0, 0.9);\n        return thunder ? this.audioEngine.applyEnvelope(thunder, 0.01, 0.5, 0.7, 1.49) : null;\n    }\n    generateRainSound() {\n        const rain = this.audioEngine.generateNoise(2.0, 0.3);\n        return rain ? this.audioEngine.applyEnvelope(rain, 0.5, 0.2, 0.9, 1.3) : null;\n    }\n    generateWindSound() {\n        const wind = this.audioEngine.generateNoise(1.5, 0.5);\n        return wind ? this.audioEngine.applyEnvelope(wind, 0.3, 0.2, 0.8, 1.0) : null;\n    }\n    generateWaveSound() {\n        const wave = this.audioEngine.generateSweep(200, 100, 2.0, \"sine\");\n        return wave ? this.audioEngine.applyEnvelope(wave, 0.3, 0.5, 0.8, 1.2) : null;\n    }\n    generateFireSound() {\n        const crackle = this.audioEngine.generateNoise(1.5, 0.4);\n        return crackle ? this.audioEngine.applyEnvelope(crackle, 0.2, 0.3, 0.8, 1.0) : null;\n    }\n    generateIceSound() {\n        const tinkle = this.audioEngine.generateTone(2000, 0.8, \"sine\");\n        return tinkle ? this.audioEngine.applyEnvelope(tinkle, 0.01, 0.2, 0.4, 0.59) : null;\n    }\n    generateTwinkleSound() {\n        const twinkle = this.audioEngine.generateSweep(1500, 2500, 0.8, \"sine\");\n        return twinkle ? this.audioEngine.applyEnvelope(twinkle, 0.01, 0.2, 0.5, 0.59) : null;\n    }\n    generateCelebrationSound() {\n        // Party horn sound\n        const horn = this.audioEngine.generateSweep(400, 800, 1.0, \"sawtooth\");\n        return horn ? this.audioEngine.applyEnvelope(horn, 0.01, 0.1, 0.8, 0.89) : null;\n    }\n    generateClapSound() {\n        const clap = this.audioEngine.generateNoise(0.1, 0.8);\n        return clap ? this.audioEngine.applyEnvelope(clap, 0.01, 0.02, 0.5, 0.07) : null;\n    }\n    generateDanceSound() {\n        const beat = this.audioEngine.generateTone(120, 1.0, \"square\");\n        return beat ? this.audioEngine.applyEnvelope(beat, 0.01, 0.1, 0.8, 0.89) : null;\n    }\n    generateRunningSound() {\n        const steps = this.audioEngine.generateNoise(0.8, 0.3);\n        return steps ? this.audioEngine.applyEnvelope(steps, 0.05, 0.1, 0.7, 0.65) : null;\n    }\n    generateCrunchSound() {\n        const crunch = this.audioEngine.generateNoise(0.4, 0.6);\n        return crunch ? this.audioEngine.applyEnvelope(crunch, 0.01, 0.08, 0.6, 0.31) : null;\n    }\n    generateSlurpSound() {\n        const slurp = this.audioEngine.generateSweep(300, 150, 0.8, \"sawtooth\");\n        return slurp ? this.audioEngine.applyEnvelope(slurp, 0.05, 0.2, 0.8, 0.55) : null;\n    }\n    generateNomSound() {\n        const nom = this.audioEngine.generateTone(250, 0.3, \"square\");\n        return nom ? this.audioEngine.applyEnvelope(nom, 0.01, 0.05, 0.8, 0.24) : null;\n    }\n    generateStickySound() {\n        const sticky = this.audioEngine.generateSweep(150, 300, 0.6, \"sine\");\n        return sticky ? this.audioEngine.applyEnvelope(sticky, 0.1, 0.2, 0.8, 0.3) : null;\n    }\n    generateGulpSound() {\n        const gulp = this.audioEngine.generateSweep(400, 200, 0.5, \"sine\");\n        return gulp ? this.audioEngine.applyEnvelope(gulp, 0.05, 0.1, 0.7, 0.35) : null;\n    }\n    generatePopSound() {\n        const pop = this.audioEngine.generateTone(800, 0.1, \"square\");\n        return pop ? this.audioEngine.applyEnvelope(pop, 0.01, 0.02, 0.8, 0.07) : null;\n    }\n    generateTypingSound() {\n        const click = this.audioEngine.generateTone(1200, 0.05, \"square\");\n        return click ? this.audioEngine.applyEnvelope(click, 0.01, 0.01, 0.8, 0.03) : null;\n    }\n    generateNotificationSound() {\n        const ding = this.audioEngine.generateTone(1000, 0.3, \"sine\");\n        return ding ? this.audioEngine.applyEnvelope(ding, 0.01, 0.05, 0.7, 0.24) : null;\n    }\n    generateCameraSound() {\n        const shutter = this.audioEngine.generateNoise(0.1, 0.5);\n        return shutter ? this.audioEngine.applyEnvelope(shutter, 0.01, 0.02, 0.8, 0.07) : null;\n    }\n    generatePrinterSound() {\n        const buzz = this.audioEngine.generateTone(300, 1.0, \"square\");\n        return buzz ? this.audioEngine.applyEnvelope(buzz, 0.1, 0.1, 0.8, 0.8) : null;\n    }\n    generateKickSound() {\n        const kick = this.audioEngine.generateTone(80, 0.3, \"sine\");\n        return kick ? this.audioEngine.applyEnvelope(kick, 0.01, 0.05, 0.6, 0.24) : null;\n    }\n    generateBounceSound() {\n        const bounce = this.audioEngine.generateSweep(400, 200, 0.3, \"sine\");\n        return bounce ? this.audioEngine.applyEnvelope(bounce, 0.01, 0.05, 0.7, 0.24) : null;\n    }\n    generateTargetSound() {\n        const hit = this.audioEngine.generateTone(1500, 0.2, \"sine\");\n        return hit ? this.audioEngine.applyEnvelope(hit, 0.01, 0.03, 0.8, 0.16) : null;\n    }\n    generateDiceSound() {\n        const rattle = this.audioEngine.generateNoise(0.5, 0.4);\n        return rattle ? this.audioEngine.applyEnvelope(rattle, 0.05, 0.1, 0.7, 0.35) : null;\n    }\n    generateCardSound() {\n        const flip = this.audioEngine.generateNoise(0.1, 0.3);\n        return flip ? this.audioEngine.applyEnvelope(flip, 0.01, 0.02, 0.8, 0.07) : null;\n    }\n    generatePuzzleSound() {\n        const click = this.audioEngine.generateTone(800, 0.2, \"sine\");\n        return click ? this.audioEngine.applyEnvelope(click, 0.01, 0.03, 0.7, 0.16) : null;\n    }\n    generateUnwrapSound() {\n        const rustle = this.audioEngine.generateNoise(0.8, 0.4);\n        return rustle ? this.audioEngine.applyEnvelope(rustle, 0.05, 0.2, 0.7, 0.55) : null;\n    }\n    generateKeySound() {\n        const jingle = this.audioEngine.generateTone(1200, 0.4, \"sine\");\n        return jingle ? this.audioEngine.applyEnvelope(jingle, 0.01, 0.05, 0.6, 0.34) : null;\n    }\n    generateOldKeySound() {\n        const creak = this.audioEngine.generateTone(200, 0.8, \"sawtooth\");\n        return creak ? this.audioEngine.applyEnvelope(creak, 0.05, 0.2, 0.8, 0.55) : null;\n    }\n    generateBlingSound() {\n        const shine = this.audioEngine.generateSweep(1500, 3000, 0.6, \"sine\");\n        return shine ? this.audioEngine.applyEnvelope(shine, 0.01, 0.1, 0.5, 0.49) : null;\n    }\n    generateRegalSound() {\n        const fanfare = this.audioEngine.generateTone(523, 1.0, \"sine\"); // C5\n        return fanfare ? this.audioEngine.applyEnvelope(fanfare, 0.1, 0.2, 0.8, 0.7) : null;\n    }\n    // Get list of popular emojis for the UI\n    getPopularEmojis() {\n        return this.popularEmojis;\n    }\n    // Clear sound cache\n    clearCache() {\n        this.soundCache.clear();\n    }\n    constructor(audioEngine){\n        this.soundCache = new Map();\n        // Popular emojis for the grid\n        this.popularEmojis = [\n            \"\\uD83D\\uDD14\",\n            \"\\uD83D\\uDE02\",\n            \"\\uD83D\\uDE97\",\n            \"\\uD83E\\uDD8E\",\n            \"\\uD83D\\uDC31\",\n            \"✨\",\n            \"\\uD83D\\uDCA5\",\n            \"\\uD83C\\uDF89\",\n            \"\\uD83D\\uDC36\",\n            \"\\uD83C\\uDFB5\",\n            \"⚡\",\n            \"\\uD83C\\uDF0A\",\n            \"\\uD83D\\uDC4F\",\n            \"\\uD83C\\uDF4E\",\n            \"\\uD83D\\uDCF1\",\n            \"⚽\",\n            \"\\uD83D\\uDE82\",\n            \"\\uD83C\\uDFB8\",\n            \"\\uD83D\\uDCA8\",\n            \"\\uD83D\\uDD25\",\n            \"\\uD83C\\uDFAF\",\n            \"\\uD83E\\uDD86\",\n            \"\\uD83D\\uDCDE\",\n            \"\\uD83E\\uDD41\"\n        ];\n        this.audioEngine = audioEngine;\n        // Define emoji categories and their sound generators\n        this.emojiMappings = {\n            // Animals\n            \"\\uD83D\\uDC31\": ()=>this.audioEngine.generateCatSound(),\n            \"\\uD83D\\uDC36\": ()=>this.audioEngine.generateGenericPlayfulSound(),\n            \"\\uD83E\\uDD8E\": ()=>this.audioEngine.generateLizardSound(),\n            \"\\uD83D\\uDC38\": ()=>this.generateFrogSound(),\n            \"\\uD83D\\uDC26\": ()=>this.generateBirdSound(),\n            \"\\uD83D\\uDC1D\": ()=>this.generateBeeSound(),\n            \"\\uD83D\\uDC04\": ()=>this.generateMooSound(),\n            \"\\uD83D\\uDC37\": ()=>this.generateOinkSound(),\n            \"\\uD83D\\uDC2D\": ()=>this.generateSqueakSound(),\n            \"\\uD83E\\uDD86\": ()=>this.generateQuackSound(),\n            // Vehicles & Transportation\n            \"\\uD83D\\uDE97\": ()=>this.audioEngine.generateCarSound(),\n            \"\\uD83D\\uDE82\": ()=>this.generateTrainSound(),\n            \"✈️\": ()=>this.generatePlaneSound(),\n            \"\\uD83D\\uDE81\": ()=>this.generateHelicopterSound(),\n            \"\\uD83D\\uDEB4\": ()=>this.generateBicycleSound(),\n            \"\\uD83D\\uDEF5\": ()=>this.generateScooterSound(),\n            // Objects & Tools\n            \"\\uD83D\\uDD14\": ()=>this.audioEngine.generateBellSound(),\n            \"\\uD83D\\uDCDE\": ()=>this.generatePhoneSound(),\n            \"⏰\": ()=>this.generateAlarmSound(),\n            \"\\uD83C\\uDFB5\": ()=>this.generateMusicSound(),\n            \"\\uD83C\\uDFB8\": ()=>this.generateGuitarSound(),\n            \"\\uD83E\\uDD41\": ()=>this.generateDrumSound(),\n            \"\\uD83C\\uDFB9\": ()=>this.generatePianoSound(),\n            \"\\uD83D\\uDCE2\": ()=>this.generateMegaphoneSound(),\n            // Emotions & Faces\n            \"\\uD83D\\uDE02\": ()=>this.audioEngine.generateLaughSound(),\n            \"\\uD83D\\uDE2D\": ()=>this.generateCrySound(),\n            \"\\uD83D\\uDE34\": ()=>this.generateSnoreSound(),\n            \"\\uD83E\\uDD27\": ()=>this.generateSneezeSound(),\n            \"\\uD83D\\uDE31\": ()=>this.generateScreamSound(),\n            \"\\uD83E\\uDD71\": ()=>this.generateYawnSound(),\n            \"\\uD83D\\uDE0B\": ()=>this.generateYumSound(),\n            // Nature & Weather\n            \"⚡\": ()=>this.generateThunderSound(),\n            \"\\uD83C\\uDF27️\": ()=>this.generateRainSound(),\n            \"\\uD83D\\uDCA8\": ()=>this.generateWindSound(),\n            \"\\uD83C\\uDF0A\": ()=>this.generateWaveSound(),\n            \"\\uD83D\\uDD25\": ()=>this.generateFireSound(),\n            \"❄️\": ()=>this.generateIceSound(),\n            // Actions & Effects\n            \"\\uD83D\\uDCA5\": ()=>this.audioEngine.generateBoomSound(),\n            \"✨\": ()=>this.audioEngine.generateSparkleSound(),\n            \"\\uD83D\\uDCAB\": ()=>this.generateTwinkleSound(),\n            \"\\uD83C\\uDF89\": ()=>this.generateCelebrationSound(),\n            \"\\uD83D\\uDC4F\": ()=>this.generateClapSound(),\n            \"\\uD83D\\uDC83\": ()=>this.generateDanceSound(),\n            \"\\uD83C\\uDFC3\": ()=>this.generateRunningSound(),\n            // Food & Drinks\n            \"\\uD83C\\uDF4E\": ()=>this.generateCrunchSound(),\n            \"\\uD83E\\uDD64\": ()=>this.generateSlurpSound(),\n            \"\\uD83C\\uDF55\": ()=>this.generateNomSound(),\n            \"\\uD83C\\uDF6F\": ()=>this.generateStickySound(),\n            \"\\uD83E\\uDD5B\": ()=>this.generateGulpSound(),\n            \"\\uD83C\\uDF7F\": ()=>this.generatePopSound(),\n            // Technology\n            \"\\uD83D\\uDCBB\": ()=>this.generateTypingSound(),\n            \"\\uD83D\\uDCF1\": ()=>this.generateNotificationSound(),\n            \"\\uD83D\\uDCF7\": ()=>this.generateCameraSound(),\n            \"\\uD83D\\uDDA8️\": ()=>this.generatePrinterSound(),\n            // Games & Sports\n            \"⚽\": ()=>this.generateKickSound(),\n            \"\\uD83C\\uDFC0\": ()=>this.generateBounceSound(),\n            \"\\uD83C\\uDFAF\": ()=>this.generateTargetSound(),\n            \"\\uD83C\\uDFB2\": ()=>this.generateDiceSound(),\n            \"\\uD83C\\uDCCF\": ()=>this.generateCardSound(),\n            // Miscellaneous\n            \"\\uD83E\\uDDE9\": ()=>this.generatePuzzleSound(),\n            \"\\uD83C\\uDF81\": ()=>this.generateUnwrapSound(),\n            \"\\uD83D\\uDD11\": ()=>this.generateKeySound(),\n            \"\\uD83D\\uDDDD️\": ()=>this.generateOldKeySound(),\n            \"\\uD83D\\uDC8D\": ()=>this.generateBlingSound(),\n            \"\\uD83D\\uDC51\": ()=>this.generateRegalSound()\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/emojiMappings.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe[prop-missing]\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n      // component, which we don't yet support. Attach a noop catch handler to\n      // silence the error.\n      // TODO: Implement component stacks for async client components?\n\n      if (maybePromise && typeof maybePromise.catch === 'function') {\n        maybePromise.catch(function () {});\n      }\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/YzI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cwww%5Ckimi-game%5Csrc%5Ccomponents%5CEmojiSoundDesigner.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);